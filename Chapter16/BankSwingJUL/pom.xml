<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Maven version of the xml document currently only 4.0.0 is valid -->
    <modelVersion>4.0.0</modelVersion>

    <!-- The GAV consists of an arbitrary descriptor that is usually in the
    form of a reverse domain name. -->
    <groupId>com.kenfogel</groupId>

    <!-- This is the name given to the packaged build -->
    <artifactId>BankSwingJUL</artifactId>

    <!-- The version of the build. Any value is valid though a number and a
    string are common. SNAPSHOT means a project under development. FINAL or no
    text is commonly used to refer to stable production version -->
    <!-- Upgraded for Java 14 with preview features, OpenFX and running OpenFX apps -->
    <version>0.1-SNAPSHOT</version>

    <!-- Packaging to be a parent pom for other projects -->
    <packaging>jar</packaging>

    <!-- Name of the project in the repository -->
    <name>BankSwingJUL</name>

    <!-- A description of the program -->
    <description>Banking program with Swing interface</description>

    <!-- Identifies the programmer or programmers who worked on the project -->
    <developers>
        <developer>
            <id></id>
            <name></name>
            <email></email>
        </developer>
    </developers>

    <!-- The company or organization that the programmer(s) work for -->
    <organization>
        <name></name>
    </organization>

    <!-- Global settings for the project. Settings can be accessed in the pom
    by placing the tag name in ${...} ex. ${mainClass} -->
    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>${java.version}</maven.compiler.release>
        <exec.mainClass>com.kenfogel.bankswing.FinanceCalculatorMain</exec.mainClass>
        <skiptests>false</skiptests>
    </properties>

    <build>
        <defaultGoal>clean verify exec:java</defaultGoal>

        <plugins>
            <!-- This plugin deletes the files in the target folder 
            that will result in all files being compiled -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>
            <!-- This plugin copies non source code files from the 
            project's resource folder to the target folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>
            <!-- We need to explicitly define this plugin so that we can
                enable preview features in a maven build and if needed use a 
                more up to date version than the version that Maven will
                use implicitly.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <release>${maven.compiler.release}</release>
                </configuration>
            </plugin>

            <!-- This plugin runs unit tests if they exist -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>

            <!-- This plugin packages all the bytecode and resource 
            files into a jar file. The manifest tag adds a META-INF folder 
            to the jar with a MANIFEST.MF file. This files lists the class 
            with the main method and this allows the final jar file to 
            be executable.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.2</version>	
                <configuration>
                    <archive>
                        <manifest>
                            <!-- The Java class that contains 
                            the main method -->
                            <mainClass>${exec.mainClass}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!-- This plugin enables Maven to execute the program if all 
            previous goals were successful -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
        </plugins>
    </build>
</project>
        
